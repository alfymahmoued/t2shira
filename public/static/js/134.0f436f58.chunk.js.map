{"version":3,"file":"static/js/134.0f436f58.chunk.js","mappings":"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","sources":["../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/utils/omit.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/controller.tsx","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/focusFieldBy.ts","../node_modules/react-hook-form/src/logic/generateId.ts","../node_modules/react-hook-form/src/logic/getFocusFieldName.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/utils/append.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/insert.ts","../node_modules/react-hook-form/src/utils/move.ts","../node_modules/react-hook-form/src/utils/prepend.ts","../node_modules/react-hook-form/src/utils/remove.ts","../node_modules/react-hook-form/src/utils/swap.ts","../node_modules/react-hook-form/src/utils/update.ts","../node_modules/react-hook-form/src/useFieldArray.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/getValidationModes.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UnpackNestedValue,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const callback = React.useCallback(({ values, name: fieldArrayName }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>\n      | Partial<UnpackNestedValue<FieldArray<TFieldValues, TFieldArrayName>>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter((data) => !isUndefined(data)).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || +inputValue;\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    !checkboxRef.disabled &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [...refs.filter(live), fieldRef],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name)._f;\n    const fieldRef = field.refs ? field.refs[0] : field.ref;\n    options.shouldSelect ? fieldRef.select() : fieldRef.focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to mange the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","useFormContext","FormProvider","props","Provider","omit","children","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","isEmptyObject","find","useSubscribe","_props","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","d","performance","now","c","r","Math","random","toString","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","startsWith","slice","append","convertToArrayPayload","cloneObject","Set","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","useFieldArray","methods","control","keyName","shouldUnregister","_getFieldArray","setFields","ids","generateId","_fieldIds","_name","_actioned","array","values","fieldArrayName","_subjects","updateValues","updatedFieldArrayValues","_updateFieldArray","_stateFlags","action","isWatched","state","_executeSchema","then","error","_formState","_formValues","_fields","isValid","_updateValid","_options","unregister","swap","swapArrayAt","argA","argB","move","moveArrayAt","prependValue","prependAt","getFocusFieldName","fillEmptyArray","appendValue","appendAt","remove","removeArrayAt","insertValue","insertAt","update","updateValue","updateAt","item","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","getValidateError","isMessage","isBoolean","validationData","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldUpdateFieldsAndState","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","getValues","_getWatch","generateWatchOutput","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"sourceRoot":""}